–í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è WPF-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ) –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ bcrypt. –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ NuGet-–ø–∞–∫–µ—Ç—ã:


    Microsoft.Data.Sqlite (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite)

    BCrypt.Net-Next (–¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π)


2. –ö–æ–¥ WPF-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

MainWindow.xaml (–æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)

<Window x:Class="BcryptExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" Height="250" Width="300">
    <StackPanel Margin="10">
        <TextBlock Text="–õ–æ–≥–∏–Ω:" />
        <TextBox x:Name="txtUsername" Margin="0,0,0,10" />
        
        <TextBlock Text="–ü–∞—Ä–æ–ª—å:" />
        <PasswordBox x:Name="txtPassword" Margin="0,0,0,10" />
        
        <Button Content="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å" Click="BtnRegister_Click" />
    </StackPanel>
</Window>



MainWindow.xaml.cs (–ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)

using System;
using System.Data;
using Microsoft.Data.Sqlite;
using BCrypt.Net;
using System.Windows;

namespace BcryptExample
{
    public partial class MainWindow : Window
    {
        private const string ConnectionString = "Data Source=users.db";

        public MainWindow()
        {
            InitializeComponent();
            InitializeDatabase();
        }

        private void InitializeDatabase()
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = @"
                    CREATE TABLE IF NOT EXISTS Users (
                        Id INTEGER PRIMARY KEY AUTOINCREMENT,
                        Username TEXT NOT NULL UNIQUE,
                        PasswordHash TEXT NOT NULL
                    )";
                command.ExecuteNonQuery();
            }
        }

        private void BtnRegister_Click(object sender, RoutedEventArgs e)
        {
            string username = txtUsername.Text;
            string password = txtPassword.Password;

            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
            {
                MessageBox.Show("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!");
                return;
            }

            try
            {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ–ª—å—é (bcrypt —Å–∞–º –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–ª—å)
                string passwordHash = BCrypt.HashPassword(password);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                using (var connection = new SqliteConnection(ConnectionString))
                {
                    connection.Open();
                    var command = connection.CreateCommand();
                    command.CommandText = "INSERT INTO Users (Username, PasswordHash) VALUES (@username, @passwordHash)";
                    command.Parameters.AddWithValue("@username", username);
                    command.Parameters.AddWithValue("@passwordHash", passwordHash);
                    command.ExecuteNonQuery();
                }

                MessageBox.Show("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}");
            }
        }
    }
}


LoginWindow.xaml (–æ–∫–Ω–æ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)


<Window x:Class="BcryptExample.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="–í—Ö–æ–¥" Height="200" Width="300">
    <StackPanel Margin="10">
        <TextBlock Text="–õ–æ–≥–∏–Ω:" />
        <TextBox x:Name="txtUsername" Margin="0,0,0,10" />
        
        <TextBlock Text="–ü–∞—Ä–æ–ª—å:" />
        <PasswordBox x:Name="txtPassword" Margin="0,0,0,10" />
        
        <Button Content="–í–æ–π—Ç–∏" Click="BtnLogin_Click" />
    </StackPanel>
</Window>

LoginWindow.xaml.cs (–ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞)


using System.Data;
using Microsoft.Data.Sqlite;
using BCrypt.Net;
using System.Windows;

namespace BcryptExample
{
    public partial class LoginWindow : Window
    {
        private const string ConnectionString = "Data Source=users.db";

        public LoginWindow()
        {
            InitializeComponent();
        }

        private void BtnLogin_Click(object sender, RoutedEventArgs e)
        {
            string username = txtUsername.Text;
            string password = txtPassword.Password;

            try
            {
                using (var connection = new SqliteConnection(ConnectionString))
                {
                    connection.Open();
                    var command = connection.CreateCommand();
                    command.CommandText = "SELECT PasswordHash FROM Users WHERE Username = @username";
                    command.Parameters.AddWithValue("@username", username);

                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            string storedHash = reader.GetString("PasswordHash");
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–µ–º –∏–∑ –ë–î
                            bool isPasswordValid = BCrypt.Verify(password, storedHash);

                            if (isPasswordValid)
                            {
                                MessageBox.Show("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
                                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                            }
                            else
                            {
                                MessageBox.Show("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!");
                            }
                        }
                        else
                        {
                            MessageBox.Show("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}");
            }
        }
    }
}



3. –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:


    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
        –ü–∞—Ä–æ–ª—å —Ö–µ—à–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é BCrypt.HashPassword(), –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ª—å –∏ –≤–∫–ª—é—á–∞–µ—Ç –µ—ë –≤ —Ö–µ—à.
        –•–µ—à —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite.

    –í—Ö–æ–¥:
        –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è BCrypt.Verify(), –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–ª—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ö–µ—à–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.


4. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ bcrypt:


    –°–æ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Ö–µ—à–µ–º.

    –£—Å—Ç–æ–π—á–∏–≤ –∫ brute-force –±–ª–∞–≥–æ–¥–∞—Ä—è –º–µ–¥–ª–µ–Ω–Ω–æ–º—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é.

    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π (–∞–ª–≥–æ—Ä–∏—Ç–º –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –Ω–æ–≤—ã–µ –∞—Ç–∞–∫–∏).


–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –≤ WPF-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! üöÄ